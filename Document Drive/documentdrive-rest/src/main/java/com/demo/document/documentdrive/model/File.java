/*
 * Document Drive
 * This is a API for document viewer component
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.demo.document.documentdrive.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;

/**
 * File Details
 */
@Schema(description = "File Details")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaJerseyServerCodegen", date = "2020-01-09T11:02:48.153Z[GMT]")public class File   {
  @JsonProperty("name")
  private String name = null;

  @JsonProperty("type")
  private Integer type = null;

  @JsonProperty("modifiedOn")
  private Long modifiedOn = null;

  @JsonProperty("fileSize")
  private String fileSize = null;

  @JsonProperty("permissions")
  private List<String> permissions = null;

  public File name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the file/folder
   * @return name
   **/
  @JsonProperty("name")
  @Schema(description = "Name of the file/folder")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public File type(Integer type) {
    this.type = type;
    return this;
  }

  /**
   * Type of object whether file/folder
   * @return type
   **/
  @JsonProperty("type")
  @Schema(description = "Type of object whether file/folder")
  public Integer getType() {
    return type;
  }

  public void setType(Integer type) {
    this.type = type;
  }

  public File modifiedOn(Long modifiedOn) {
    this.modifiedOn = modifiedOn;
    return this;
  }

  /**
   * Timestamp of last modified operation
   * @return modifiedOn
   **/
  @JsonProperty("modifiedOn")
  @Schema(description = "Timestamp of last modified operation")
  public Long getModifiedOn() {
    return modifiedOn;
  }

  public void setModifiedOn(Long modifiedOn) {
    this.modifiedOn = modifiedOn;
  }

  public File fileSize(String fileSize) {
    this.fileSize = fileSize;
    return this;
  }

  /**
   * Size of the file/folder
   * @return fileSize
   **/
  @JsonProperty("fileSize")
  @Schema(description = "Size of the file/folder")
  public String getFileSize() {
    return fileSize;
  }

  public void setFileSize(String fileSize) {
    this.fileSize = fileSize;
  }

  public File permissions(List<String> permissions) {
    this.permissions = permissions;
    return this;
  }

  public File addPermissionsItem(String permissionsItem) {
    if (this.permissions == null) {
      this.permissions = new ArrayList<String>();
    }
    this.permissions.add(permissionsItem);
    return this;
  }

  /**
   * Permission to access the file
   * @return permissions
   **/
  @JsonProperty("permissions")
  @Schema(description = "Permission to access the file")
  public List<String> getPermissions() {
    return permissions;
  }

  public void setPermissions(List<String> permissions) {
    this.permissions = permissions;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    File file = (File) o;
    return Objects.equals(this.name, file.name) &&
        Objects.equals(this.type, file.type) &&
        Objects.equals(this.modifiedOn, file.modifiedOn) &&
        Objects.equals(this.fileSize, file.fileSize) &&
        Objects.equals(this.permissions, file.permissions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, type, modifiedOn, fileSize, permissions);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class File {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    modifiedOn: ").append(toIndentedString(modifiedOn)).append("\n");
    sb.append("    fileSize: ").append(toIndentedString(fileSize)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
