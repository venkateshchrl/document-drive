/*
 * Document Drive
 * This is a API for document viewer component
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.demo.document.documentdrive.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;

/**
 * Configuration of a file
 */
@Schema(description = "Configuration of a file")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaJerseyServerCodegen", date = "2020-01-09T11:02:48.153Z[GMT]")public class FileObject   {
  @JsonProperty("location")
  private String location = null;

  @JsonProperty("content")
  private List<File> content = null;

  public FileObject location(String location) {
    this.location = location;
    return this;
  }

  /**
   * Location where the files to be uploaded
   * @return location
   **/
  @JsonProperty("location")
  @Schema(description = "Location where the files to be uploaded")
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }

  public FileObject content(List<File> content) {
    this.content = content;
    return this;
  }

  public FileObject addContentItem(File contentItem) {
    if (this.content == null) {
      this.content = new ArrayList<File>();
    }
    this.content.add(contentItem);
    return this;
  }

  /**
   * Files to be uploaded
   * @return content
   **/
  @JsonProperty("content")
  @Schema(description = "Files to be uploaded")
  public List<File> getContent() {
    return content;
  }

  public void setContent(List<File> content) {
    this.content = content;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FileObject fileObject = (FileObject) o;
    return Objects.equals(this.location, fileObject.location) &&
        Objects.equals(this.content, fileObject.content);
  }

  @Override
  public int hashCode() {
    return Objects.hash(location, content);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FileObject {\n");
    
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
